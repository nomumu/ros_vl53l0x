--- VL53L0X.cpp	2016-09-27 15:17:24.363624085 +0000
+++ VL53L0X-edison,cpp	2016-09-27 15:11:53.687430091 +0000
@@ -3,8 +3,7 @@
 // or paraphrased from the API source code, API user manual (UM2039), and the
 // VL53L0X datasheet.
 
-#include <VL53L0X.h>
-#include <Wire.h>
+#include <ros_vl53l0x/VL53L0X.h>
 
 // Defines /////////////////////////////////////////////////////////////////////
 
@@ -32,12 +31,16 @@
 // PLL_period_ps = 1655; macro_period_vclks = 2304
 #define calcMacroPeriod(vcsel_period_pclks) ((((uint32_t)2304 * (vcsel_period_pclks) * 1655) + 500) / 1000)
 
+// Edison I2C bus number
+#define I2C_BUS_NUMBER  (1)
+
 // Constructors ////////////////////////////////////////////////////////////////
 
 VL53L0X::VL53L0X(void)
-  : address(ADDRESS_DEFAULT)
+  : slave_address(ADDRESS_DEFAULT)
   , io_timeout(0) // no timeout
   , did_timeout(false)
+  , mraa::I2c( I2C_BUS_NUMBER )
 {
 }
 
@@ -45,8 +48,8 @@
 
 void VL53L0X::setAddress(uint8_t new_addr)
 {
-  writeReg(I2C_SLAVE_DEVICE_ADDRESS, new_addr & 0x7F);
-  address = new_addr;
+  writeReg8Bit(I2C_SLAVE_DEVICE_ADDRESS, new_addr & 0x7F);
+  slave_address = new_addr;
 }
 
 // Initialize sensor using sequence based on VL53L0X_DataInit(),
@@ -59,33 +62,42 @@
 // mode.
 bool VL53L0X::init(bool io_2v8)
 {
+  mraa_result_t res;
+
+  res = address( slave_address );
+  if( res != MRAA_SUCCESS )
+  {
+    printf("I2C fatal error.\n");
+    return false;
+  }
+
   // VL53L0X_DataInit() begin
 
   // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
   if (io_2v8)
   {
-    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
-      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
+    writeReg8Bit(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
+      readReg8Bit(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
   }
 
   // "Set I2C standard mode"
-  writeReg(0x88, 0x00);
+  writeReg8Bit(0x88, 0x00);
 
-  writeReg(0x80, 0x01);
-  writeReg(0xFF, 0x01);
-  writeReg(0x00, 0x00);
-  stop_variable = readReg(0x91);
-  writeReg(0x00, 0x01);
-  writeReg(0xFF, 0x00);
-  writeReg(0x80, 0x00);
+  writeReg8Bit(0x80, 0x01);
+  writeReg8Bit(0xFF, 0x01);
+  writeReg8Bit(0x00, 0x00);
+  stop_variable = readReg8Bit(0x91);
+  writeReg8Bit(0x00, 0x01);
+  writeReg8Bit(0xFF, 0x00);
+  writeReg8Bit(0x80, 0x00);
 
   // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
-  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
+  writeReg8Bit(MSRC_CONFIG_CONTROL, readReg8Bit(MSRC_CONFIG_CONTROL) | 0x12);
 
   // set final range signal rate limit to 0.25 MCPS (million counts per second)
   setSignalRateLimit(0.25);
 
-  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
+  writeReg8Bit(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 
   // VL53L0X_DataInit() end
 
@@ -103,11 +115,11 @@
 
   // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)
 
-  writeReg(0xFF, 0x01);
-  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
-  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
-  writeReg(0xFF, 0x00);
-  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
+  writeReg8Bit(0xFF, 0x01);
+  writeReg8Bit(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
+  writeReg8Bit(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
+  writeReg8Bit(0xFF, 0x00);
+  writeReg8Bit(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 
   uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
   uint8_t spads_enabled = 0;
@@ -133,108 +145,108 @@
   // -- VL53L0X_load_tuning_settings() begin
   // DefaultTuningSettings from vl53l0x_tuning.h
 
-  writeReg(0xFF, 0x01);
-  writeReg(0x00, 0x00);
+  writeReg8Bit(0xFF, 0x01);
+  writeReg8Bit(0x00, 0x00);
 
-  writeReg(0xFF, 0x00);
-  writeReg(0x09, 0x00);
-  writeReg(0x10, 0x00);
-  writeReg(0x11, 0x00);
-
-  writeReg(0x24, 0x01);
-  writeReg(0x25, 0xFF);
-  writeReg(0x75, 0x00);
-
-  writeReg(0xFF, 0x01);
-  writeReg(0x4E, 0x2C);
-  writeReg(0x48, 0x00);
-  writeReg(0x30, 0x20);
-
-  writeReg(0xFF, 0x00);
-  writeReg(0x30, 0x09);
-  writeReg(0x54, 0x00);
-  writeReg(0x31, 0x04);
-  writeReg(0x32, 0x03);
-  writeReg(0x40, 0x83);
-  writeReg(0x46, 0x25);
-  writeReg(0x60, 0x00);
-  writeReg(0x27, 0x00);
-  writeReg(0x50, 0x06);
-  writeReg(0x51, 0x00);
-  writeReg(0x52, 0x96);
-  writeReg(0x56, 0x08);
-  writeReg(0x57, 0x30);
-  writeReg(0x61, 0x00);
-  writeReg(0x62, 0x00);
-  writeReg(0x64, 0x00);
-  writeReg(0x65, 0x00);
-  writeReg(0x66, 0xA0);
-
-  writeReg(0xFF, 0x01);
-  writeReg(0x22, 0x32);
-  writeReg(0x47, 0x14);
-  writeReg(0x49, 0xFF);
-  writeReg(0x4A, 0x00);
-
-  writeReg(0xFF, 0x00);
-  writeReg(0x7A, 0x0A);
-  writeReg(0x7B, 0x00);
-  writeReg(0x78, 0x21);
-
-  writeReg(0xFF, 0x01);
-  writeReg(0x23, 0x34);
-  writeReg(0x42, 0x00);
-  writeReg(0x44, 0xFF);
-  writeReg(0x45, 0x26);
-  writeReg(0x46, 0x05);
-  writeReg(0x40, 0x40);
-  writeReg(0x0E, 0x06);
-  writeReg(0x20, 0x1A);
-  writeReg(0x43, 0x40);
-
-  writeReg(0xFF, 0x00);
-  writeReg(0x34, 0x03);
-  writeReg(0x35, 0x44);
-
-  writeReg(0xFF, 0x01);
-  writeReg(0x31, 0x04);
-  writeReg(0x4B, 0x09);
-  writeReg(0x4C, 0x05);
-  writeReg(0x4D, 0x04);
-
-  writeReg(0xFF, 0x00);
-  writeReg(0x44, 0x00);
-  writeReg(0x45, 0x20);
-  writeReg(0x47, 0x08);
-  writeReg(0x48, 0x28);
-  writeReg(0x67, 0x00);
-  writeReg(0x70, 0x04);
-  writeReg(0x71, 0x01);
-  writeReg(0x72, 0xFE);
-  writeReg(0x76, 0x00);
-  writeReg(0x77, 0x00);
-
-  writeReg(0xFF, 0x01);
-  writeReg(0x0D, 0x01);
-
-  writeReg(0xFF, 0x00);
-  writeReg(0x80, 0x01);
-  writeReg(0x01, 0xF8);
-
-  writeReg(0xFF, 0x01);
-  writeReg(0x8E, 0x01);
-  writeReg(0x00, 0x01);
-  writeReg(0xFF, 0x00);
-  writeReg(0x80, 0x00);
+  writeReg8Bit(0xFF, 0x00);
+  writeReg8Bit(0x09, 0x00);
+  writeReg8Bit(0x10, 0x00);
+  writeReg8Bit(0x11, 0x00);
+
+  writeReg8Bit(0x24, 0x01);
+  writeReg8Bit(0x25, 0xFF);
+  writeReg8Bit(0x75, 0x00);
+
+  writeReg8Bit(0xFF, 0x01);
+  writeReg8Bit(0x4E, 0x2C);
+  writeReg8Bit(0x48, 0x00);
+  writeReg8Bit(0x30, 0x20);
+
+  writeReg8Bit(0xFF, 0x00);
+  writeReg8Bit(0x30, 0x09);
+  writeReg8Bit(0x54, 0x00);
+  writeReg8Bit(0x31, 0x04);
+  writeReg8Bit(0x32, 0x03);
+  writeReg8Bit(0x40, 0x83);
+  writeReg8Bit(0x46, 0x25);
+  writeReg8Bit(0x60, 0x00);
+  writeReg8Bit(0x27, 0x00);
+  writeReg8Bit(0x50, 0x06);
+  writeReg8Bit(0x51, 0x00);
+  writeReg8Bit(0x52, 0x96);
+  writeReg8Bit(0x56, 0x08);
+  writeReg8Bit(0x57, 0x30);
+  writeReg8Bit(0x61, 0x00);
+  writeReg8Bit(0x62, 0x00);
+  writeReg8Bit(0x64, 0x00);
+  writeReg8Bit(0x65, 0x00);
+  writeReg8Bit(0x66, 0xA0);
+
+  writeReg8Bit(0xFF, 0x01);
+  writeReg8Bit(0x22, 0x32);
+  writeReg8Bit(0x47, 0x14);
+  writeReg8Bit(0x49, 0xFF);
+  writeReg8Bit(0x4A, 0x00);
+
+  writeReg8Bit(0xFF, 0x00);
+  writeReg8Bit(0x7A, 0x0A);
+  writeReg8Bit(0x7B, 0x00);
+  writeReg8Bit(0x78, 0x21);
+
+  writeReg8Bit(0xFF, 0x01);
+  writeReg8Bit(0x23, 0x34);
+  writeReg8Bit(0x42, 0x00);
+  writeReg8Bit(0x44, 0xFF);
+  writeReg8Bit(0x45, 0x26);
+  writeReg8Bit(0x46, 0x05);
+  writeReg8Bit(0x40, 0x40);
+  writeReg8Bit(0x0E, 0x06);
+  writeReg8Bit(0x20, 0x1A);
+  writeReg8Bit(0x43, 0x40);
+
+  writeReg8Bit(0xFF, 0x00);
+  writeReg8Bit(0x34, 0x03);
+  writeReg8Bit(0x35, 0x44);
+
+  writeReg8Bit(0xFF, 0x01);
+  writeReg8Bit(0x31, 0x04);
+  writeReg8Bit(0x4B, 0x09);
+  writeReg8Bit(0x4C, 0x05);
+  writeReg8Bit(0x4D, 0x04);
+
+  writeReg8Bit(0xFF, 0x00);
+  writeReg8Bit(0x44, 0x00);
+  writeReg8Bit(0x45, 0x20);
+  writeReg8Bit(0x47, 0x08);
+  writeReg8Bit(0x48, 0x28);
+  writeReg8Bit(0x67, 0x00);
+  writeReg8Bit(0x70, 0x04);
+  writeReg8Bit(0x71, 0x01);
+  writeReg8Bit(0x72, 0xFE);
+  writeReg8Bit(0x76, 0x00);
+  writeReg8Bit(0x77, 0x00);
+
+  writeReg8Bit(0xFF, 0x01);
+  writeReg8Bit(0x0D, 0x01);
+
+  writeReg8Bit(0xFF, 0x00);
+  writeReg8Bit(0x80, 0x01);
+  writeReg8Bit(0x01, 0xF8);
+
+  writeReg8Bit(0xFF, 0x01);
+  writeReg8Bit(0x8E, 0x01);
+  writeReg8Bit(0x00, 0x01);
+  writeReg8Bit(0xFF, 0x00);
+  writeReg8Bit(0x80, 0x00);
 
   // -- VL53L0X_load_tuning_settings() end
 
   // "Set interrupt config to new sample ready"
   // -- VL53L0X_SetGpioConfig() begin
 
-  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
-  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
-  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
+  writeReg8Bit(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
+  writeReg8Bit(GPIO_HV_MUX_ACTIVE_HIGH, readReg8Bit(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
+  writeReg8Bit(SYSTEM_INTERRUPT_CLEAR, 0x01);
 
   // -- VL53L0X_SetGpioConfig() end
 
@@ -245,7 +257,7 @@
   // TCC = Target CentreCheck
   // -- VL53L0X_SetSequenceStepEnable() begin
 
-  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
+  writeReg8Bit(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 
   // -- VL53L0X_SetSequenceStepEnable() end
 
@@ -258,20 +270,20 @@
 
   // -- VL53L0X_perform_vhv_calibration() begin
 
-  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
+  writeReg8Bit(SYSTEM_SEQUENCE_CONFIG, 0x01);
   if (!performSingleRefCalibration(0x40)) { return false; }
 
   // -- VL53L0X_perform_vhv_calibration() end
 
   // -- VL53L0X_perform_phase_calibration() begin
 
-  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
+  writeReg8Bit(SYSTEM_SEQUENCE_CONFIG, 0x02);
   if (!performSingleRefCalibration(0x00)) { return false; }
 
   // -- VL53L0X_perform_phase_calibration() end
 
   // "restore the previous Sequence Config"
-  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
+  writeReg8Bit(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 
   // VL53L0X_PerformRefCalibration() end
 
@@ -279,49 +291,31 @@
 }
 
 // Write an 8-bit register
-void VL53L0X::writeReg(uint8_t reg, uint8_t value)
+void VL53L0X::writeReg8Bit(uint8_t reg, uint8_t value)
 {
-  Wire.beginTransmission(address);
-  Wire.write(reg);
-  Wire.write(value);
-  last_status = Wire.endTransmission();
+  writeReg( reg, value );
 }
 
 // Write a 16-bit register
 void VL53L0X::writeReg16Bit(uint8_t reg, uint16_t value)
 {
-  Wire.beginTransmission(address);
-  Wire.write(reg);
-  Wire.write((value >> 8) & 0xFF); // value high byte
-  Wire.write( value       & 0xFF); // value low byte
-  last_status = Wire.endTransmission();
+  value = ((value<<8) | (value>>8));       // byte swap
+  writeWordReg( reg, value );
 }
 
 // Write a 32-bit register
 void VL53L0X::writeReg32Bit(uint8_t reg, uint32_t value)
 {
-  Wire.beginTransmission(address);
-  Wire.write(reg);
-  Wire.write((value >> 24) & 0xFF); // value highest byte
-  Wire.write((value >> 16) & 0xFF);
-  Wire.write((value >>  8) & 0xFF);
-  Wire.write( value        & 0xFF); // value lowest byte
-  last_status = Wire.endTransmission();
+  writeReg( reg,   (value >> 24) & 0xFF); // value highest byte
+  writeReg( reg+1, (value >> 16) & 0xFF);
+  writeReg( reg+2, (value >>  8) & 0xFF);
+  writeReg( reg+3,  value        & 0xFF); // value lowest byte
 }
 
 // Read an 8-bit register
-uint8_t VL53L0X::readReg(uint8_t reg)
+uint8_t VL53L0X::readReg8Bit(uint8_t reg)
 {
-  uint8_t value;
-
-  Wire.beginTransmission(address);
-  Wire.write(reg);
-  last_status = Wire.endTransmission();
-
-  Wire.requestFrom(address, (uint8_t)1);
-  value = Wire.read();
-
-  return value;
+  return readReg( reg );
 }
 
 // Read a 16-bit register
@@ -329,13 +323,8 @@
 {
   uint16_t value;
 
-  Wire.beginTransmission(address);
-  Wire.write(reg);
-  last_status = Wire.endTransmission();
-
-  Wire.requestFrom(address, (uint8_t)2);
-  value  = (uint16_t)Wire.read() << 8; // value high byte
-  value |=           Wire.read();      // value low byte
+  value = readWordReg( reg );
+  value = ((value << 8) | (value >> 8));// byte swap
 
   return value;
 }
@@ -343,17 +332,12 @@
 // Read a 32-bit register
 uint32_t VL53L0X::readReg32Bit(uint8_t reg)
 {
-  uint16_t value;
+  uint32_t value;
 
-  Wire.beginTransmission(address);
-  Wire.write(reg);
-  last_status = Wire.endTransmission();
-
-  Wire.requestFrom(address, (uint8_t)4);
-  value  = (uint32_t)Wire.read() << 24; // value highest byte
-  value |= (uint32_t)Wire.read() << 16;
-  value |= (uint16_t)Wire.read() <<  8;
-  value |=           Wire.read();       // value lowest byte
+  value  = (uint32_t)readReg(reg  ) << 24; // value highest byte
+  value |= (uint32_t)readReg(reg+1) << 16;
+  value |= (uint16_t)readReg(reg+2) <<  8;
+  value |=           readReg(reg+3);       // value lowest byte
 
   return value;
 }
@@ -362,30 +346,19 @@
 // starting at the given register
 void VL53L0X::writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
 {
-  Wire.beginTransmission(address);
-  Wire.write(reg);
-
-  while (count-- > 0)
+  for( int i=0 ; i<count ; ++i )
   {
-    Wire.write(*(src++));
+    writeReg( (reg+i), *(src++) );
   }
-
-  last_status = Wire.endTransmission();
 }
 
 // Read an arbitrary number of bytes from the sensor, starting at the given
 // register, into the given array
 void VL53L0X::readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
 {
-  Wire.beginTransmission(address);
-  Wire.write(reg);
-  last_status = Wire.endTransmission();
-
-  Wire.requestFrom(address, count);
-
-  while (count-- > 0)
+  for( int i=0 ; i<count ; ++i )
   {
-    *(dst++) = Wire.read();
+    *(dst++) = readReg( reg+i );
   }
 }
 
@@ -591,29 +564,29 @@
     switch (period_pclks)
     {
       case 12:
-        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
+        writeReg8Bit(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
         break;
 
       case 14:
-        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
+        writeReg8Bit(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
         break;
 
       case 16:
-        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
+        writeReg8Bit(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
         break;
 
       case 18:
-        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
+        writeReg8Bit(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
         break;
 
       default:
         // invalid period
         return false;
     }
-    writeReg(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
+    writeReg8Bit(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 
     // apply new VCSEL period
-    writeReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
+    writeReg8Bit(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 
     // update timeouts
 
@@ -634,7 +607,7 @@
     uint16_t new_msrc_timeout_mclks =
       timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 
-    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
+    writeReg8Bit(MSRC_CONFIG_TIMEOUT_MACROP,
       (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 
     // set_sequence_step_timeout() end
@@ -644,43 +617,43 @@
     switch (period_pclks)
     {
       case 8:
-        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
-        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
-        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
-        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
-        writeReg(0xFF, 0x01);
-        writeReg(ALGO_PHASECAL_LIM, 0x30);
-        writeReg(0xFF, 0x00);
+        writeReg8Bit(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
+        writeReg8Bit(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
+        writeReg8Bit(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
+        writeReg8Bit(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
+        writeReg8Bit(0xFF, 0x01);
+        writeReg8Bit(ALGO_PHASECAL_LIM, 0x30);
+        writeReg8Bit(0xFF, 0x00);
         break;
 
       case 10:
-        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
-        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
-        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
-        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
-        writeReg(0xFF, 0x01);
-        writeReg(ALGO_PHASECAL_LIM, 0x20);
-        writeReg(0xFF, 0x00);
+        writeReg8Bit(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
+        writeReg8Bit(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
+        writeReg8Bit(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
+        writeReg8Bit(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
+        writeReg8Bit(0xFF, 0x01);
+        writeReg8Bit(ALGO_PHASECAL_LIM, 0x20);
+        writeReg8Bit(0xFF, 0x00);
         break;
 
       case 12:
-        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
-        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
-        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
-        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
-        writeReg(0xFF, 0x01);
-        writeReg(ALGO_PHASECAL_LIM, 0x20);
-        writeReg(0xFF, 0x00);
+        writeReg8Bit(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
+        writeReg8Bit(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
+        writeReg8Bit(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
+        writeReg8Bit(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
+        writeReg8Bit(0xFF, 0x01);
+        writeReg8Bit(ALGO_PHASECAL_LIM, 0x20);
+        writeReg8Bit(0xFF, 0x00);
         break;
 
       case 14:
-        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
-        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
-        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
-        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
-        writeReg(0xFF, 0x01);
-        writeReg(ALGO_PHASECAL_LIM, 0x20);
-        writeReg(0xFF, 0x00);
+        writeReg8Bit(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
+        writeReg8Bit(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
+        writeReg8Bit(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
+        writeReg8Bit(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
+        writeReg8Bit(0xFF, 0x01);
+        writeReg8Bit(ALGO_PHASECAL_LIM, 0x20);
+        writeReg8Bit(0xFF, 0x00);
         break;
 
       default:
@@ -689,7 +662,7 @@
     }
 
     // apply new VCSEL period
-    writeReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
+    writeReg8Bit(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 
     // update timeouts
 
@@ -727,10 +700,10 @@
   // "Perform the phase calibration. This is needed after changing on vcsel period."
   // VL53L0X_perform_phase_calibration() begin
 
-  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
-  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
+  uint8_t sequence_config = readReg8Bit(SYSTEM_SEQUENCE_CONFIG);
+  writeReg8Bit(SYSTEM_SEQUENCE_CONFIG, 0x02);
   performSingleRefCalibration(0x0);
-  writeReg(SYSTEM_SEQUENCE_CONFIG, sequence_config);
+  writeReg8Bit(SYSTEM_SEQUENCE_CONFIG, sequence_config);
 
   // VL53L0X_perform_phase_calibration() end
 
@@ -743,11 +716,11 @@
 {
   if (type == VcselPeriodPreRange)
   {
-    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
+    return decodeVcselPeriod(readReg8Bit(PRE_RANGE_CONFIG_VCSEL_PERIOD));
   }
   else if (type == VcselPeriodFinalRange)
   {
-    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
+    return decodeVcselPeriod(readReg8Bit(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
   }
   else { return 255; }
 }
@@ -760,13 +733,13 @@
 // based on VL53L0X_StartMeasurement()
 void VL53L0X::startContinuous(uint32_t period_ms)
 {
-  writeReg(0x80, 0x01);
-  writeReg(0xFF, 0x01);
-  writeReg(0x00, 0x00);
-  writeReg(0x91, stop_variable);
-  writeReg(0x00, 0x01);
-  writeReg(0xFF, 0x00);
-  writeReg(0x80, 0x00);
+  writeReg8Bit(0x80, 0x01);
+  writeReg8Bit(0xFF, 0x01);
+  writeReg8Bit(0x00, 0x00);
+  writeReg8Bit(0x91, stop_variable);
+  writeReg8Bit(0x00, 0x01);
+  writeReg8Bit(0xFF, 0x00);
+  writeReg8Bit(0x80, 0x00);
 
   if (period_ms != 0)
   {
@@ -785,12 +758,12 @@
 
     // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end
 
-    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
+    writeReg8Bit(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
   }
   else
   {
     // continuous back-to-back mode
-    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
+    writeReg8Bit(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
   }
 }
 
@@ -798,13 +771,13 @@
 // based on VL53L0X_StopMeasurement()
 void VL53L0X::stopContinuous(void)
 {
-  writeReg(SYSRANGE_START, 0x01); // VL53L0X_REG_SYSRANGE_MODE_SINGLESHOT
+  writeReg8Bit(SYSRANGE_START, 0x01); // VL53L0X_REG_SYSRANGE_MODE_SINGLESHOT
 
-  writeReg(0xFF, 0x01);
-  writeReg(0x00, 0x00);
-  writeReg(0x91, 0x00);
-  writeReg(0x00, 0x01);
-  writeReg(0xFF, 0x00);
+  writeReg8Bit(0xFF, 0x01);
+  writeReg8Bit(0x00, 0x00);
+  writeReg8Bit(0x91, 0x00);
+  writeReg8Bit(0x00, 0x01);
+  writeReg8Bit(0xFF, 0x00);
 }
 
 // Returns a range reading in millimeters when continuous mode is active
@@ -813,7 +786,7 @@
 uint16_t VL53L0X::readRangeContinuousMillimeters(void)
 {
   startTimeout();
-  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
+  while ((readReg8Bit(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
   {
     if (checkTimeoutExpired())
     {
@@ -826,7 +799,7 @@
   // fractional ranging is not enabled
   uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);
 
-  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
+  writeReg8Bit(SYSTEM_INTERRUPT_CLEAR, 0x01);
 
   return range;
 }
@@ -836,19 +809,19 @@
 // based on VL53L0X_PerformSingleRangingMeasurement()
 uint16_t VL53L0X::readRangeSingleMillimeters(void)
 {
-  writeReg(0x80, 0x01);
-  writeReg(0xFF, 0x01);
-  writeReg(0x00, 0x00);
-  writeReg(0x91, stop_variable);
-  writeReg(0x00, 0x01);
-  writeReg(0xFF, 0x00);
-  writeReg(0x80, 0x00);
+  writeReg8Bit(0x80, 0x01);
+  writeReg8Bit(0xFF, 0x01);
+  writeReg8Bit(0x00, 0x00);
+  writeReg8Bit(0x91, stop_variable);
+  writeReg8Bit(0x00, 0x01);
+  writeReg8Bit(0xFF, 0x00);
+  writeReg8Bit(0x80, 0x00);
 
-  writeReg(SYSRANGE_START, 0x01);
+  writeReg8Bit(SYSRANGE_START, 0x01);
 
   // "Wait until start bit has been cleared"
   startTimeout();
-  while (readReg(SYSRANGE_START) & 0x01)
+  while (readReg8Bit(SYSRANGE_START) & 0x01)
   {
     if (checkTimeoutExpired())
     {
@@ -878,38 +851,38 @@
 {
   uint8_t tmp;
 
-  writeReg(0x80, 0x01);
-  writeReg(0xFF, 0x01);
-  writeReg(0x00, 0x00);
-
-  writeReg(0xFF, 0x06);
-  writeReg(0x83, readReg(0x83) | 0x04);
-  writeReg(0xFF, 0x07);
-  writeReg(0x81, 0x01);
+  writeReg8Bit(0x80, 0x01);
+  writeReg8Bit(0xFF, 0x01);
+  writeReg8Bit(0x00, 0x00);
+
+  writeReg8Bit(0xFF, 0x06);
+  writeReg8Bit(0x83, readReg8Bit(0x83) | 0x04);
+  writeReg8Bit(0xFF, 0x07);
+  writeReg8Bit(0x81, 0x01);
 
-  writeReg(0x80, 0x01);
+  writeReg8Bit(0x80, 0x01);
 
-  writeReg(0x94, 0x6b);
-  writeReg(0x83, 0x00);
+  writeReg8Bit(0x94, 0x6b);
+  writeReg8Bit(0x83, 0x00);
   startTimeout();
-  while (readReg(0x83) == 0x00)
+  while (readReg8Bit(0x83) == 0x00)
   {
     if (checkTimeoutExpired()) { return false; }
   }
-  writeReg(0x83, 0x01);
-  tmp = readReg(0x92);
+  writeReg8Bit(0x83, 0x01);
+  tmp = readReg8Bit(0x92);
 
   *count = tmp & 0x7f;
   *type_is_aperture = (tmp >> 7) & 0x01;
 
-  writeReg(0x81, 0x00);
-  writeReg(0xFF, 0x06);
-  writeReg(0x83, readReg( 0x83  & ~0x04));
-  writeReg(0xFF, 0x01);
-  writeReg(0x00, 0x01);
+  writeReg8Bit(0x81, 0x00);
+  writeReg8Bit(0xFF, 0x06);
+  writeReg8Bit(0x83, readReg8Bit( 0x83  & ~0x04));
+  writeReg8Bit(0xFF, 0x01);
+  writeReg8Bit(0x00, 0x01);
 
-  writeReg(0xFF, 0x00);
-  writeReg(0x80, 0x00);
+  writeReg8Bit(0xFF, 0x00);
+  writeReg8Bit(0x80, 0x00);
 
   return true;
 }
@@ -918,7 +891,7 @@
 // based on VL53L0X_GetSequenceStepEnables()
 void VL53L0X::getSequenceStepEnables(SequenceStepEnables * enables)
 {
-  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
+  uint8_t sequence_config = readReg8Bit(SYSTEM_SEQUENCE_CONFIG);
 
   enables->tcc          = (sequence_config >> 4) & 0x1;
   enables->dss          = (sequence_config >> 3) & 0x1;
@@ -935,7 +908,7 @@
 {
   timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 
-  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
+  timeouts->msrc_dss_tcc_mclks = readReg8Bit(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
   timeouts->msrc_dss_tcc_us =
     timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
                                timeouts->pre_range_vcsel_period_pclks);
@@ -1020,17 +993,18 @@
 // based on VL53L0X_perform_single_ref_calibration()
 bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
 {
-  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
+  writeReg8Bit(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 
   startTimeout();
-  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
+  while ((readReg8Bit(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
   {
     if (checkTimeoutExpired()) { return false; }
   }
 
-  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
+  writeReg8Bit(SYSTEM_INTERRUPT_CLEAR, 0x01);
 
-  writeReg(SYSRANGE_START, 0x00);
+  writeReg8Bit(SYSRANGE_START, 0x00);
 
   return true;
 }
+
